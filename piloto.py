#Victor Silva Camargo BCC

#Para  obter  os  pontos  relativos  a  este  trabalho,  voc√™  dever√°  criar  um  programa,  utilizando  a 
#linguagem  Python, C, ou C++.  Este  programa,  quando  executado,  ir√°  apresentar  os  resultados  de 
#opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.  
#O  programa  que  voc√™  desenvolver√°  ir√°  receber  como  entrada um arquivo de texto  (.txt) 
#contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas 
#em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas 
#segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de 
#opera√ß√µes  que  est√£o  descritas  no  arquivo,  este  n√∫mero  de  opera√ß√µes  ser√°  um  inteiro;  as  linhas 
#seguintes  seguir√£o  sempre  o  mesmo  padr√£o  de  tr√™s  linhas:  a  primeira  linha  apresenta  o  c√≥digo  da 
#opera√ß√£o  (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano),  a  segunda  e 
#terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo 
#das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver: 
#4 
#U 
#3, 5, 67, 7 
#1, 2, 3, 4  
#I 
#1, 2, 3, 4, 5 
#4, 5 
#D 
#1, A, C, 34 
#A, C, D, 23 
#C 
#3, 4, 5, 5, A, B, R 
#1, B, C, D, 1 
#Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um 
#produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë,ùüì,ùüîùüï,ùüï} e 
#{ùüè,ùüê,ùüë,ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).  
#A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados 
#dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter 
#a informa√ß√£o e a formata√ß√£o mostrada a seguir:    
#Uni√£o: conjunto 1 {3,5,67,7}, conjunto 2 {1,2,3,4}. Resultado: {3,5,67,7,1,2,4}   
#Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer 
#um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo 
#de  textos  de  entrada  formatada  segundo  o  exemplo  de  sa√≠da  acima.  Observe  as  letras  mai√∫sculas  e 
#min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.  
#No  caso  do  texto  de  exemplo,  teremos  4  linhas,  e  apenas  4  linhas  de  sa√≠da,  formatadas  e 
#pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o, 
#implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento. 
#Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada 
#contendo um n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem
#diferentes.  Os  arquivos  de  entrada  criados  para  os  seus  testes  devem  estar  dispon√≠veis  tanto  no 
#ambiente repl.it quanto no ambiente Github.  
#Observe que o professor ir√° testar seu programa com os arquivos de testes que voc√™ criar e com, 
#no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor.

texto = open('teste.txt')
arquivo = texto.readlines()
arquivo = [x.rstrip('\n') for x in arquivo]
virgula=','
lista=['U','I','D','C']             #Codigo para abrir o arquivo txt, retirar o caractere de pular linha"\n"
                                    #A vari√°vel v√≠rgula √© para fazer a remo√ß√£o da v√≠rgula para ela n√£o ser contada como um
                                    #caractere e n√£o participar das opera√ß√µes,o vetor lista √© para detectar que tipo de opera√ß√£o
                                    #ser√° realizada

for i in range(len(arquivo)):
    if arquivo[i][0] in lista:
        conjunto = arquivo[i][0]    #La√ßo de repeti√ß√£o para percorrer todo o arquivo e adicionar um caractere de cada vez a uma vari√°vel
        if conjunto == 'U':         #Detectar a letra para realizar as opera√ß√µes
            vetu1=[]                #Vetores para armazenar os conjuntos e o resultado final
            vetu2=[]
            vetu3=[]
            for valor in arquivo[i+1].split(','):   #La√ßo de repeti√ß√£o para adicionar os caracteres do arquivo nos vetores
                vetu1.append(valor)                 #e impedir que o c√≥digo separe os caracteres que tenham dois digitos ou mais
            for valor in arquivo[i+2].split(','):   #atrav√©s do "split"
                vetu2.append(valor)
            while virgula in vetu1:                 #La√ßo de repeti√ß√£o para retirar as v√≠rgulas que foram inseridas nos vetores como 
                vetu1.remove(virgula)               #caracteres
            while virgula in vetu2:
                vetu2.remove(virgula)
            for i in vetu1:
                if i not in vetu3:                  #La√ßo de repeti√ß√£o para inserir os caracteres em um √∫nico vetor
                    vetu3.append(i)                 #sem haver repeti√ß√µes de caracteres
            for i in vetu2:
                if i not in vetu3:
                    vetu3.append(i)
            print("Uni√£o: conjunto 1 {",vetu1,"}"", conjunto 2 {",vetu2,"}."" Resultado: {",vetu3,"}")
            
        elif conjunto == 'I':                       #Mesma logica do algor√≠timico da Uni√£o
            veti1=[]
            veti2=[]
            veti3=[]
            for valor in arquivo[i+1].split(','):
                veti1.append(valor)
            for valor in arquivo[i+2].split(','):
                veti2.append(valor)
            while virgula in veti1:
                veti1.remove(virgula)
            while virgula in veti2:
                veti2.remove(virgula)
            for i in veti1:                         #La√ßo de repeti√ß√£o para detectar caracteres que se repetem e inserir no vetor resposta
                if i in veti1 and i in veti2:
                    veti3.append(i)
            print("Interse√ß√£o: conjunto 1 {",veti1,"}"", conjunto 2 {",veti2,"}."" Resultado: {",veti3,"}")
            
        elif conjunto == 'D':                       #Mesma l√≥gica do conjunto Uni√£o
            vetd1=[]
            vetd2=[]
            vetd3=[]
            for valor in arquivo[i+1].split(','):
                vetd1.append(valor)
            for valor in arquivo[i+2].split(','):
                vetd2.append(valor)
            while virgula in vetd1:
                vetd1.remove(virgula)
            while virgula in vetd2:
                vetd2.remove(virgula)
            for i in vetd1:                             #La√ßo de repeti√ß√£o para comparar os dois vetores e inserir os que n√£o se repetem
                if i in vetd1 and i not in vetd2:       #no vetor resposta
                    vetd3.append(i)
            for i in vetd2:
                if i in vetd2 and i not in vetd1 and i not in vetd3:
                    vetd3.append(i)
            print("Diferen√ßa: conjunto 1 {",vetd1,"}"", conjunto 2 {",vetd2,"}."" Resultado: {",vetd3,"}")
            
        elif conjunto == 'C':                           #Mesa l√≥gica do conjunto Uni√£o
            vetc1=[]
            vetc2=[]
            vetc3=[]
            for valor in arquivo[i+1].split(','):
                vetc1.append(valor)
            for valor in arquivo[i+2].split(','):
                vetc2.append(valor)
            while virgula in vetc1:
                vetc1.remove(virgula)
            while virgula in vetc2:
                vetc2.remove(virgula)
            for l in range(0,len(vetc1)):               #La√ßo de repeti√ß√£o para criar uma matriz e fazer todas as combina√ß√µes poss√≠veis
                vetc3.append([])
                for c in range(0,len(vetc2)):
                    num= vetc1[l],vetc2[c]
                    vetc3[l].append(num)
            print("Cartesiano: conjunto 1 {",vetc1,"}"", conjunto 2 {",vetc2,"}."" Resultado: {",vetc3,"}")